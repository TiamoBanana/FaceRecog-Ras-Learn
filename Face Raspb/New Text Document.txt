import tensorflow as tf
import matplotlib.pyplot as plt
import cv2
import numpy as np
import os
import sqlite3
from PIL import Image

import keras
from keras.utils import np_utils
from keras.models import Sequential
from keras.layers import *
from keras.utils.np_utils import to_categorical

#Get data
path = 'dataset'

def getImageWithId(path):
    imagePaths = [os.path.join(path, f) for f in os.listdir(path)]
    
    faces = []
    IDs = []
    
    for imagePath in imagePaths:
        
        faceImg = Image.open(imagePath).convert('L')
        
        faceNp = np.array(faceImg, 'uint8')
        
        Id = int(imagePath.split('.')[1])
        
        faces.append(faceNp)
        IDs.append(Id)
        
        cv2.imshow('training', faceNp)
        cv2.waitKey(10)
    return faces, IDs

#Create train and test
faces, Ids = getImageWithId(path)

x_train = np.array(faces)
y_train = np.array(Ids)

cv2.destroyAllWindows()

x = x_train
x_train = np.reshape(x_train,(x_train.shape[0],256,256,1))/255
filenames=os.listdir("dataset")
categories=[]
for f_name in filenames:
    category=f_name.split('.')[1]
    if category=='1':
        categories.append(0)
    elif category=='2':
        categories.append(1)
    elif category=='3':
        categories.append(2)
    elif category=='4':
        categories.append(3)
    elif category=='5':
        categories.append(4)
print(categories[0])
print(categories[300])
y_train = np_utils.to_categorical(categories,5)
print(x_train.shape)
print(y_train)
print(y_train.shape)

#Create model
model = Sequential()

model.add(Conv2D(32, (5, 5), activation='relu', padding='same', input_shape=(256,256,1)))

model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(16, (5, 5), padding='same', activation='relu'))

model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Flatten())

model.add(Dense(1024, activation='relu'))

model.add(Dense(512, activation='relu'))

model.add(Dense(5, activation='softmax'))

model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
print('done')

#Training
H = model.fit(x_train, y_train, batch_size = 32, epochs = 5)